;
; Task_class_03.asm
;
; Created: 12/25/2019 1:26:18 PM
; Author : O
;

;the skeleton of teacher from moodlearn 

;
; main.asm
;
; Created: 23/12/2019 16:27:40
; Author : W7
;
;  Read arrin from flash and save all elements to arrout in RAM 
;
.include "8def.inc"


.def    index_reg = r17
.def    temp_reg    = r18
.def    zero_reg    = r19
.equ	NUM_CHARS  =   10
.def    one_reg    =   r20
;data    
.dseg
.org 0x60

arrout:	.byte  NUM_CHARS  ; destination for data
checkHere: .byte 1

.cseg

.org 0

ldi temp_reg,  0xAA     ; don't erase this!!
sts checkHere,temp_reg  ; don't erase this!!

;initialize index reg
ldi  index_reg,NUM_CHARS-1

ldi zero_reg,0
ldi one_reg,1
;code
start: 


loop:
	; set Z to beginning of arrin
   	ldi zH, HIGH(arrin)
	ldi zL, LOW(arrin) ; [Xhl] <- &arrin[0]
	
    ; fix offset in CSEG (words)
    lsl zL  
	rol zH  ; *2

	; set Y to beginning of arrout
	ldi YH, HIGH(arrout)
	ldi YL, LOW(arrout) ; [Yhl] <- &arrout[0]

	; use index to read the next byte
	add zL,index_reg
	adc zH,zero_reg
	
	; use index to write the byte
	add yL,index_reg
	adc yH,zero_reg
	
	; arrout[i] = arrin[i]
	lpm  temp_reg,z
	st   y,temp_reg
	
 
	; decrement the index
	sbci   index_reg,1
    brcc loop ; do while (index_reg >= 0) ....

end: rjmp end


.org 0x40
arrin:	.db  0xa,0xb, 0xc, 0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13   ; source data